version: '3'

services:
  postgres:
      build: 
        context: ./keycloak/db
        args:
          BACKUP_FILE: ./dbexport.sql
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
      ports:
        - 5432:5432
      networks:
        - market-app-network
      volumes:
        - postgres_data:/var/lib/postgresql/data
  keycloak:
      image: quay.io/keycloak/keycloak:legacy
      environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: postgres
        DB_SCHEMA: public
        DB_PASSWORD: postgres
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: admin
        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
        #JDBC_PARAMS: "ssl=true"
        # KEYCLOAK_IMPORT: /tmp/realm-export.json
      ports:
        - 8080:8080
        - 9990:9990
      depends_on:
        - postgres
        - openldap
      networks:
        - market-app-network
      volumes:
        - ./keycloak/realms/realm-export.json:/tmp/realm-export.json

  openldap:
      image: docker.io/bitnami/openldap:2.6
      environment:
          LDAP_ROOT: dc=trodix,dc=com
          LDAP_ADMIN_USERNAME: admin
          LDAP_ADMIN_PASSWORD: admin
          LDAP_USERS: user1,user2, user3
          LDAP_PASSWORDS: user1,user2,user3
      ports:
        - 1389:1389
        - 1636:1636
      networks:
        - market-app-network
      volumes:
        - openldap_data:/bitnami/openldap

  activemq:
      image: webcenter/activemq:5.14.3
      ports:
        - 8161:8161
        - 61616:61616

  elasticsearch:
    image: elasticsearch:8.4.3
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      discovery.type: single-node
      # ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    networks:
      - market-app-network
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.4.3
    container_name: kibana
    ports:
      - 5601:5601
      - 9600:9600
    environment:
      ES_JAVA_OPTS: -Xmx512m -Xms512m
      SERVERNAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: kibana_system
      # ELASTICSEARCH_PASSWORD: ${KIBANA_PASSWORD}
    networks:
      - market-app-network
    volumes:
      - kibana_data:/usr/share/kibana/data


  prometheus:
    image: prom/prometheus
    container_name: 'prometheus'
    network_mode: host
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/

  grafana:
    image: grafana/grafana:9.0.2
    container_name: 'grafana'
    network_mode: host
    env_file:
      - ./monitoring/grafana/config.monitoring
    environment:
        GF_SECURITY_ADMIN_PASSWORD: password
        GF_RENDERING_SERVER_URL: http://localhost:3001/render
        GF_RENDERING_CALLBACK_URL: http://localhost:3000/
        GF_LOG_FILTERS: rendering:debug
        GF_ALERTING_ENABLED: 'false'
        GF_UNIFIED_ALERTING_ENABLED: 'true'
        GF_UNIFIED_ALERTING_SCREENSHOTS_CAPTURE: 'true'
        GF_FORCE_MIGRATION: 'true'
        GF_SMTP_ENABLED: 'true'
        GF_SMTP_HOST: localhost:1025
    volumes:
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
      - ./monitoring/grafana/dashboards/:/var/lib/grafana/dashboards/
    depends_on:
      - prometheus
  grafana-renderer:
    image: grafana/grafana-image-renderer:latest
    network_mode: host
    environment:
      HTTP_PORT: 3001

  node-exporter:
    image: prom/node-exporter:latest
    container_name: monitoring_node_exporter
    ports:
      - 5100:9100

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: monitoring_cadvisor
    ports:
      - 5110:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
  maildev:
    image: maildev/maildev
    network_mode: host

networks:
  market-app-network:
    driver: bridge
volumes:
  postgres_data:
      driver: local
  openldap_data:
    driver: local
  elasticsearch_data:
    driver: local
  kibana_data:
    driver: local
